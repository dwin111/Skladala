@page "/counter"
@using Skladala.Persistence.Models;

<PageTitle>Counter</PageTitle>


<div class="mb-3">
    <p>Product Name</p>
    <input type="text" class="form-control" placeholder="Product Name" aria-label="Product Name" aria-describedby="basic-addon1" @bind="@ProductDto.Name">
</div>

<div class="mb-3">
    <p>Quantity</p>
    <input type="number" class="form-control" placeholder="Quantity" aria-label="Quantity" aria-describedby="basic-addon1" @bind="@ProductDto.Quantity">
</div>

<div>
    <div class="input-group rounded">
        <span>Is Food Product?&nbsp;&nbsp; </span>
        <input type="checkbox" aria-label="Checkbox for following text input" @bind="@ProductDto.IsFoodProduct">
    </div>
    <div class="d-flex align-items-center justify-content-center">
    @if (ProductDto.IsFoodProduct)
    {
        <h5>This is Food Product</h5>
    }
    else
    {
        <h5>This is Nonfood Product</h5>
    }
    </div>

</div>

@if (ProductDto.IsFoodProduct)
{
    <div class="mb-3">
        <p>Weight</p>
        <input type="number" class="form-control" placeholder="Weight" aria-label="Weight" aria-describedby="basic-addon1" @bind="@ProductDto.Weight">
    </div>
    <div class=" mb-3">
        <p>Expiration Date</p>
        <input type="date" class="form-control" placeholder="Expiration Date" aria-label="Expiration Date" aria-describedby="basic-addon1" @bind="@ProductDto.ExpirationDate">
    </div>
}
else
{
    <div class="mb-3">
        <p>Height</p>
        <input type="number" class="form-control" placeholder="Height" aria-label="Height" aria-describedby="basic-addon1" @bind="@ProductDto.Height">
    </div>
    <div class="mb-3">
        <p>Width</p>
        <input type="number" class="form-control" placeholder="Width" aria-label="Width" aria-describedby="basic-addon1" @bind="@ProductDto.Width">
    </div>
}

<button @onclick="(async () => await CreateProduct())">Create</button>


@code {

    public AllProductDto ProductDto = new()
    {
            Group = "",
            Manufacturer = "",
    };

    [Inject]
    public NonfoodProductServices nonfoodProductServices { get; set; }
    [Inject]
    public FoodProductServices foodProductServices { get; set; }


    public async Task CreateProduct()
    {
        if (ProductDto.IsFoodProduct)
        {
            var food = new FoodProduct()
                {
                    Name = ProductDto.Name,
                    ExpirationDate = ProductDto.ExpirationDate,
                    Group = ProductDto.Group,
                    Manufacturer = ProductDto.Manufacturer,
                    Quantity = ProductDto.Quantity,
                    Cost = ProductDto.Cost,
                    Weight = ProductDto.Weight,
                };
            await foodProductServices.CreateAsync(food);
        }
        if (!ProductDto.IsFoodProduct)
        {
            var nonfood = new NonfoodProducts()
                {
                    Name = ProductDto.Name,
                    Group = ProductDto.Group,
                    Manufacturer = ProductDto.Manufacturer,
                    Quantity = ProductDto.Quantity,
                    Cost = ProductDto.Cost,
                    Height = ProductDto.Height,
                    Width = ProductDto.Width,
                };
            await nonfoodProductServices.CreateAsync(nonfood);
        }
    }

}
