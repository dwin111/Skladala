@page "/counter"
@using Skladala.Persistence.Models;

<PageTitle>CreateProduct</PageTitle>


<div class="mb-3">
    <p>Product Name</p>
    <input type="text" class="form-control" placeholder="Product Name" aria-label="Product Name" aria-describedby="basic-addon1" @bind="@ProductDto.Name">
</div>

<div class="mb-3">
    <p>Quantity</p>
    <input type="number" class="form-control" placeholder="Quantity" aria-label="Quantity" aria-describedby="basic-addon1" @bind="@ProductDto.Quantity">
</div>
<div class="mb-3">
    <p>Manufacturer</p>
    <input type="text" class="form-control" placeholder="Manufacturer" aria-label="Manufacturer" aria-describedby="basic-addon1" @bind="@ProductDto.Manufacturer">
</div>
<div class="mb-3">
    <p>Group</p>
    <input type="text" class="form-control" placeholder="Group" aria-label="Group" aria-describedby="basic-addon1" @bind="@ProductDto.Group">
</div>

<div>
    <div class="input-group rounded">
        <span>Is Food Product?&nbsp;&nbsp; </span>
        <input type="checkbox" aria-label="Checkbox for following text input" @bind="@ProductDto.IsFoodProduct">
    </div>
    <div class="d-flex align-items-center justify-content-center">
    @if (ProductDto.IsFoodProduct)
    {
        <h5>This is Food Product</h5>
    }
    else
    {
        <h5>This is Nonfood Product</h5>
    }
    </div>

</div>

@if (ProductDto.IsFoodProduct)
{
    <div class="mb-3">
        <p>Weight</p>
        <input type="number" class="form-control" placeholder="Weight" aria-label="Weight" aria-describedby="basic-addon1" @bind="@ProductDto.Weight">
    </div>
    <div class=" mb-3">
        <p>Manufacture Date</p>
        <input type="date" class="form-control" placeholder="Manufacture Date" aria-label="Manufacture Date" aria-describedby="basic-addon1" @bind="@ProductDto.DateManufacture">
    </div>
    <h5 class="text-danger">If the expiration date is 80% over, the price will be reduced by half</h5>
    <div class=" mb-3">
        <p>Expiration Date</p>
        <input type="date" class="form-control" placeholder="Expiration Date" aria-label="Expiration Date" aria-describedby="basic-addon1" @bind="@ProductDto.ExpirationDate">
    </div>
}
else
{
    @if (ProductDto.Height > 100 || ProductDto.Width > 100)
    {
        <h5 class="text-danger">If the height or width is greater than 100 cm, the price will be 1.5 times higher</h5>
    }
    <div class="mb-3">
        <p>Height</p>
        <input type="number" class="form-control" placeholder="Height" aria-label="Height" aria-describedby="basic-addon1" @bind="@ProductDto.Height">
    </div>
    <div class="mb-3">
        <p>Width</p>
        <input type="number" class="form-control" placeholder="Width" aria-label="Width" aria-describedby="basic-addon1" @bind="@ProductDto.Width">
    </div>
}

<div class="mb-3">
    <p>Cost</p>
    <input type="number" class="form-control" placeholder="Cost" aria-label="Cost" aria-describedby="basic-addon1" @bind="@ProductDto.Cost">
</div>

<button class="btn btn-success" @onclick="(async () => await CreateProducts())">Create</button>


@if (modalError)
{
    <ModalViewError TitleText="Error" Close="(() => modalError = false)">
        <BodyContent>
            <h5 class="text-danger">@ErrorMessage</h5>
        </BodyContent>
    </ModalViewError>
}

@code {
    private bool modalError = false;
    private string ErrorMessage = "";

    public AllProductDto ProductDto = new()
    {
            Group = "",
            Manufacturer = "",
    };

    [Inject]
    public NonfoodProductServices nonfoodProductServices { get; set; }
    [Inject]
    public FoodProductServices foodProductServices { get; set; }


    public async Task CreateProducts()
    {
        if (ValidationData(ProductDto))
        {
            if (ProductDto.IsFoodProduct)
            {
                var food = new FoodProduct()
                    {
                        Name = ProductDto.Name,
                        ExpirationDate = ProductDto.ExpirationDate,
                        Group = ProductDto.Group,
                        Manufacturer = ProductDto.Manufacturer,
                        Quantity = ProductDto.Quantity,
                        Cost = ProductDto.Cost,
                        Weight = ProductDto.Weight,
                    };
                await foodProductServices.CreateAsync(food);
            }
            if (!ProductDto.IsFoodProduct)
            {
                var nonfood = new NonfoodProducts()
                    {
                        Name = ProductDto.Name,
                        Group = ProductDto.Group,
                        Manufacturer = ProductDto.Manufacturer,
                        Quantity = ProductDto.Quantity,
                        Cost = ProductDto.Cost,
                        Height = ProductDto.Height,
                        Width = ProductDto.Width,
                    };
                await nonfoodProductServices.CreateAsync(nonfood);
            }
        }

    }

    private bool ValidationData(AllProductDto ProductDto)
    {
        if (ProductDto.Name == null || ProductDto.Name.Replace(" ", "") == "")
        {
            ErrorMessage = "Product name is required";
            modalError = true;
            return false;
        }
        else if (ProductDto.Quantity <= 0)
        {
            ErrorMessage = "The product quantity cannot be less than 0";
            modalError = true;
            return false;
        }
        else if (ProductDto.IsFoodProduct && ProductDto.Weight <= 0)
        {
            ErrorMessage = "Weight must be greater than 0";
            modalError = true;
            return false;
        }
        else if (!ProductDto.IsFoodProduct && ProductDto.Width <= 0)
        {
            ErrorMessage = "Width must be greater than 0";
            modalError = true;
            return false;
        }
        else if (!ProductDto.IsFoodProduct && ProductDto.Height <= 0)
        {
            ErrorMessage = "Height must be greater than 0";
            modalError = true;
            return false;
        }
        else if (ProductDto.Cost <= 0)
        {
            ErrorMessage = "The price must be greater than 0";
            modalError = true;
            return false;
        }
        return true;
    }

}
